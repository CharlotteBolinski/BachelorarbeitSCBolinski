%Übergeben werden projezierte Daten projektion_2D
%von einem zum nächsten Frame

%homographie( punkte_start, punkte_ziel, anzahl_frames, frame_index)
%Es werden immer nur 2 Frames betrachtet! 
%Homographie muss pro vorgeclustertem Körper berechnet werden!! NICHT auf
%alle Daten, sonst kommt eine falsche HGomographieschätzung heraus
%homographie( projektion_A, frame_index_start, frame_index_ziel)
%homographie( proj_gesamt, 4, 1, 2)

%Affine Homographie kann u.U. robuster für die Fehlerberechnung sein

function [ homographie_matrix ] = homographie( projektion_gesamt, anzahl_frames, frame_index_start, frame_index_ziel)
%Berechnung der Homographie von einem Satz Eingangsdaten eines Frames zu
%den Ausgangsdaten eines anderen Frames
%Hier wird zunächst von einer Berechnung zwischen 2 Frames ausgegangen
%Autor: Sophie-Charlotte Bolinski, Matrikelnummer: 545839, htw-berlin

%Punkte pro Frame ermitteln
punkte_size = size(projektion_gesamt);
punkte_pro_frame = punkte_size(1)/anzahl_frames;

%Daten selektieren/vorbereiten
start = projektion_gesamt(frame_index_start:(frame_index_start+punkte_pro_frame), :); %andere Spaltenauswahl wenn andere Daten übergeben
ziel = projektion_gesamt(frame_index_ziel:(frame_index_ziel+punkte_pro_frame), :);

%Gleichungssystem mit MATLAB Funktionalität lösen
%Ausgegangen wird von 2D Daten mit [x y] als Spalten
for row = 1:punkte_pro_frame
    
    %Matrix eines Punktes
    Point1 = [start(row,1), start(row,2), 1, 0, 0, 0, -start(row,1)*ziel(row,1), -start(row,2)*ziel(row,1)];
    Point2 = [0, 0, 0, start(row,1), start(row,2), 1, -start(row,1)*ziel(row,2), -start(row,2)*ziel(row,2)];
    Point = [Point1; Point2];

    %Anhängen der Punktmatrik an Gleichungssystem-Matrix
    %Definieren der Zielmatrix
    if row == 1

        Punktmatrix = Point;
        Zielmatrix = [start(row,1); start(row,2)];

    else

        Punktmatrix = [Punktmatrix; Point];
        Zielmatrix = [Zielmatrix; start(row,1); start(row,2)];

    end

end

%Gleichungssystem lösen 
homographie_parameter = Punktmatrix\Zielmatrix;

%Parameter zu Matrix zusammensetzen
homographie_matrix = [homographie_parameter(1:3)'; homographie_parameter(4:6)'; homographie_parameter(7:8)',1];

%Abbildungsfehler berechnen
%Fehler pro Punkt speichern, um Wahrscheinlichkeit zu berechnen, dass der
%Punkt zu dem Cluster gehört oder nicht (je nach Abweichung)

%teil1 = abs(start_punkt-homographie(ziel_punkt))^2
%punkt_homographie = abs(ziel_punkt - )^2
homographie_fehler = 

end

